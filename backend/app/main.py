import os
import pathlib

import joblib
from dotenv import load_dotenv
from fastapi import FastAPI, Query
from fastapi.middleware.cors import CORSMiddleware

from app.utils.api_helpers import call_tmap_transit_api
from app.utils.ml_helpers import predict_adjustment, train_personalization_model

load_dotenv()  # .env Î°úÎìú

# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", 8000))
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

app = FastAPI(
    title="PaceTry API",
    description="Î≥¥Ìñâ ÏÜçÎèÑ Í∞úÏù∏Ìôî API",
    version="1.0.0",
    debug=DEBUG,
    docs_url="/docs",
    redoc_url="/redoc",
)

# CORS ÎØ∏Îì§Ïõ®Ïñ¥ Ï∂îÍ∞Ä
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Í∞úÎ∞úÏö©, Ïö¥ÏòÅÏóêÏÑúÎäî Íµ¨Ï≤¥Ï†Å ÎèÑÎ©îÏù∏ ÏÑ§Ï†ï
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


def calculate_walking_time(distance_meters, avg_speed_kmh=4.5):
    speed_mps = avg_speed_kmh * 1000 / 3600  # m/sÎ°ú Î≥ÄÌôò
    estimated_time_seconds = distance_meters / speed_mps if speed_mps > 0 else 0
    return int(estimated_time_seconds)


# ÌååÏùº Í≤ΩÎ°ú ÏÑ§Ï†ï

base_dir = pathlib.Path(__file__).parent.parent
model_path = base_dir / "personalization_model.pkl"
sample_data_path = base_dir / "app" / "utils" / "sample_walking_data.csv"

try:
    personalization_model = joblib.load(str(model_path))
except FileNotFoundError:
    train_personalization_model(str(sample_data_path))
    personalization_model = joblib.load(str(model_path))


@app.get("/")
async def read_root():
    return {
        "message": "üö∂‚Äç‚ôÇÔ∏è PaceTry API Server",
        "version": "1.0.0",
        "status": "Ïö¥ÏòÅ Ï§ë",
        "docs": "http://127.0.0.1:8000/docs",
        "health": "http://127.0.0.1:8000/health"
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """ÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï©ÎãàÎã§."""
    return {"status": "healthy", "version": "1.0.0"}


@app.get("/transit-route", tags=["Routes"])
async def get_transit_route(
    start_x: float = Query(..., description="Ï∂úÎ∞úÏßÄ Í≤ΩÎèÑ"),
    start_y: float = Query(..., description="Ï∂úÎ∞úÏßÄ ÏúÑÎèÑ"),
    end_x: float = Query(..., description="ÎèÑÏ∞©ÏßÄ Í≤ΩÎèÑ"),
    end_y: float = Query(..., description="ÎèÑÏ∞©ÏßÄ ÏúÑÎèÑ"),
    count: int = Query(1, description="Í≤ΩÎ°ú Í∞úÏàò"),
    lang: int = Query(0, description="Ïñ∏Ïñ¥ ÏÑ§Ï†ï"),
    format: str = Query("json", description="ÏùëÎãµ ÌòïÏãù"),
    user_id: str = Query("default_user", description="ÏÇ¨Ïö©Ïûê ID"),
    user_age: int = Query(30, description="ÏÇ¨Ïö©Ïûê ÎÇòÏù¥"),
    fatigue_level: int = Query(3, description="ÌîºÎ°úÎèÑ Î†àÎ≤® (1-5)"),
):
    """
    Í∞úÏù∏ÌôîÎêú ÎåÄÏ§ëÍµêÌÜµ Í≤ΩÎ°úÎ•º Í≤ÄÏÉâÌï©ÎãàÎã§.

    ÏÇ¨Ïö©ÏûêÏùò ÎÇòÏù¥ÏôÄ ÌîºÎ°úÎèÑÎ•º Í≥†Î†§ÌïòÏó¨ Î≥¥Ìñâ ÏãúÍ∞ÑÏùÑ Ï°∞Ï†ïÌïú Í≤ΩÎ°ú Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§.
    """
    response = call_tmap_transit_api(
        start_x, start_y, end_x, end_y, count, lang, format
    )

    if response.status_code == 200:
        data = response.json()
        itinerary = data.get("metaData", {}).get("plan", {}).get("itineraries", [{}])[0]

        # ÎèÑÎ≥¥ ÏãúÍ∞Ñ Ï∂îÏ∂ú
        walking_sections = []
        total_walk_time = itinerary.get("totalWalkTime", 0)  # Ï†ÑÏ≤¥ ÎèÑÎ≥¥ ÏãúÍ∞Ñ (Ï¥à)
        for leg in itinerary.get("legs", []):
            if leg.get("mode") == "WALK":
                walking_sections.append(
                    {
                        "section_time_seconds": leg.get("sectionTime", 0),
                        "distance_meters": leg.get("distance", 0),
                        "start_name": leg.get("start", {}).get("name", "Unknown"),
                        "end_name": leg.get("end", {}).get("name", "Unknown"),
                    }
                )

        # Í≥ÑÏÇ∞ Î°úÏßÅ: ÏòàÏÉÅ ÏãúÍ∞Ñ Î∞è Ïò§Ï∞®
        for section in walking_sections:
            section["estimated_time_seconds"] = calculate_walking_time(
                section["distance_meters"]
            )
            section["actual_vs_estimated_diff"] = (
                section["section_time_seconds"] - section["estimated_time_seconds"]
            )
            if (
                abs(section["actual_vs_estimated_diff"])
                > section["section_time_seconds"] * 0.2
            ):
                section[
                    "accuracy_warning"
                ] = "High variance - consider real-time factors"

        # Í∞úÏù∏Ìôî Ï†ÅÏö©
        personalized_sections = []
        for section in walking_sections:
            factor = predict_adjustment(
                personalization_model,
                section["distance_meters"],
                user_age,
                fatigue_level,
            )
            section["personalized_time_seconds"] = int(
                section["section_time_seconds"] * factor
            )
            personalized_sections.append(section)

        # ÌòºÌï© Í≤ΩÎ°ú Ï≤òÎ¶¨
        total_time = itinerary.get("totalTime", 0)
        walk_ratio = (total_walk_time / total_time) * 100 if total_time > 0 else 0

        processed_data = {
            "original_data": data,
            "total_time_minutes": total_time / 60,
            "total_walk_time_minutes": total_walk_time / 60,
            "walk_ratio_percent": walk_ratio,
            "non_walk_time_minutes": (total_time - total_walk_time) / 60,
            "walking_sections_count": len(walking_sections),
            "walking_sections": personalized_sections,
            "total_estimated_walk_time_minutes": sum(
                section["estimated_time_seconds"] for section in walking_sections
            )
            / 60,
            "total_personalized_walk_time_minutes": sum(
                section["personalized_time_seconds"]
                for section in personalized_sections
            )
            / 60,
            "adjustment_factor": factor,
            "overall_accuracy_note": "Times are estimates; adjust for weather/terrain",
        }
        return processed_data
    else:
        # ÏóêÎü¨ Ï≤òÎ¶¨
        error_details = response.json()
        error_code = error_details.get("error", {}).get("code", "Unknown")
        error_message = error_details.get("error", {}).get("message", "Unknown error")
        return {
            "error_code": error_code,
            "error_message": error_message,
            "status_code": response.status_code,
        }
